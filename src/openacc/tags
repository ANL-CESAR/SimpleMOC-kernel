!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^  CC = gcc$/;"	m
CC	Makefile	/^  CC = icc$/;"	m
CC	Makefile	/^  CC = mpicc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -std=gnu99$/;"	m
COMPILER	Makefile	/^COMPILER    = intel$/;"	m
DEBUG	Makefile	/^DEBUG       = yes$/;"	m
Input	SimpleMOC-kernel_header.h	/^} Input;$/;"	t	typeref:struct:__anon1
LDFLAGS	Makefile	/^LDFLAGS = -lm$/;"	m
MIC	Makefile	/^MIC         = no$/;"	m
N	SimpleMOC-kernel_header.h	/^	int N;$/;"	m	struct:__anon3
OPENMP	Makefile	/^  OPENMP = yes$/;"	m
OPENMP	Makefile	/^OPENMP      = yes$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE    = yes$/;"	m
PAPI	Makefile	/^PAPI        = no$/;"	m
PROFILE	Makefile	/^PROFILE     = no$/;"	m
SIMD_Vectors	SimpleMOC-kernel_header.h	/^} SIMD_Vectors;$/;"	t	typeref:struct:__anon4
Source	SimpleMOC-kernel_header.h	/^} Source;$/;"	t	typeref:struct:__anon2
Table	SimpleMOC-kernel_header.h	/^} Table;$/;"	t	typeref:struct:__anon3
__SimpleMOC_header	SimpleMOC-kernel_header.h	2;"	d
aligned_allocate_simd_vectors	init.c	/^SIMD_Vectors aligned_allocate_simd_vectors(Input * I)$/;"	f
allocate_simd_vectors	init.c	/^SIMD_Vectors allocate_simd_vectors(Input * I)$/;"	f
attenuate_segment	kernel.c	/^void attenuate_segment( Input * restrict I, Source * restrict S,$/;"	f
border_print	io.c	/^void border_print(void)$/;"	f
buildExponentialTable	init.c	/^Table * buildExponentialTable( float precision, float maxVal )$/;"	f
center_print	io.c	/^void center_print(const char *s, int width)$/;"	f
counter_init	papi.c	/^void counter_init( int *eventset, int *num_papi_events, Input * I )$/;"	f
counter_stop	papi.c	/^void counter_stop( int * eventset, int num_papi_events, Input * I )$/;"	f
dx	SimpleMOC-kernel_header.h	/^	float dx;$/;"	m	struct:__anon3
egroups	SimpleMOC-kernel_header.h	/^	int egroups;$/;"	m	struct:__anon1
event_name	SimpleMOC-kernel_header.h	/^    char event_name[PAPI_MAX_STR_LEN]; $/;"	m	struct:__anon1
expVal	SimpleMOC-kernel_header.h	/^	float * expVal;$/;"	m	struct:__anon4
fancy_int	io.c	/^void fancy_int( int a )$/;"	f
fine_axial_intervals	SimpleMOC-kernel_header.h	/^	int fine_axial_intervals;$/;"	m	struct:__anon1
fine_flux	SimpleMOC-kernel_header.h	/^	float * fine_flux;$/;"	m	struct:__anon2
fine_source	SimpleMOC-kernel_header.h	/^	float * fine_source;$/;"	m	struct:__anon2
flux_integral	SimpleMOC-kernel_header.h	/^	float * flux_integral;$/;"	m	struct:__anon4
get_time	init.c	/^double get_time(void)$/;"	f
init_locks	init.c	/^omp_lock_t * init_locks( Input * I )$/;"	f
initialize_sources	init.c	/^Source * initialize_sources( Input * I )$/;"	f
interpolateTable	kernel.c	/^float interpolateTable( Table * restrict table, float x)$/;"	f
locks	SimpleMOC-kernel_header.h	/^	omp_lock_t * locks;$/;"	m	struct:__anon2
logo	io.c	/^void logo(int version)$/;"	f
main	main.c	/^int main( int argc, char * argv[] )$/;"	f
maxVal	SimpleMOC-kernel_header.h	/^	float maxVal;$/;"	m	struct:__anon3
nthreads	SimpleMOC-kernel_header.h	/^	int nthreads;$/;"	m	struct:__anon1
obj	Makefile	/^obj = $(source:.c=.o)$/;"	m
papi_event_set	SimpleMOC-kernel_header.h	/^	int papi_event_set;$/;"	m	struct:__anon1
papi_serial_init	papi.c	/^void papi_serial_init(void)$/;"	f
print_CLI_error	io.c	/^void print_CLI_error(void)$/;"	f
print_input_summary	io.c	/^void print_input_summary(Input * I)$/;"	f
program	Makefile	/^program = SimpleMOC-kernel$/;"	m
q0	SimpleMOC-kernel_header.h	/^	float * q0;$/;"	m	struct:__anon4
q1	SimpleMOC-kernel_header.h	/^	float * q1;$/;"	m	struct:__anon4
q2	SimpleMOC-kernel_header.h	/^	float * q2;$/;"	m	struct:__anon4
read_CLI	io.c	/^void read_CLI( int argc, char * argv[], Input * input )$/;"	f
reuse	SimpleMOC-kernel_header.h	/^	float * reuse;$/;"	m	struct:__anon4
run_kernel	kernel.c	/^void run_kernel( int egroups, Source * S, Table * table, int (*rands)[3])$/;"	f
segments	SimpleMOC-kernel_header.h	/^	long segments;$/;"	m	struct:__anon1
set_default_input	init.c	/^Input * set_default_input( void )$/;"	f
sigT	SimpleMOC-kernel_header.h	/^	float * sigT;$/;"	m	struct:__anon2
sigT	SimpleMOC-kernel_header.h	/^	float * sigT;$/;"	m	struct:__anon4
sigT2	SimpleMOC-kernel_header.h	/^	float * sigT2;$/;"	m	struct:__anon4
source	Makefile	/^source = \\$/;"	m
source_regions	SimpleMOC-kernel_header.h	/^	int source_regions;$/;"	m	struct:__anon1
t1	SimpleMOC-kernel_header.h	/^	float * t1;$/;"	m	struct:__anon4
t2	SimpleMOC-kernel_header.h	/^	float * t2;$/;"	m	struct:__anon4
t3	SimpleMOC-kernel_header.h	/^	float * t3;$/;"	m	struct:__anon4
t4	SimpleMOC-kernel_header.h	/^	float * t4;$/;"	m	struct:__anon4
tally	SimpleMOC-kernel_header.h	/^	float * tally;$/;"	m	struct:__anon4
tau	SimpleMOC-kernel_header.h	/^	float * tau;$/;"	m	struct:__anon4
vals_accum	SimpleMOC-kernel_header.h	/^    long long *vals_accum;$/;"	m	struct:__anon1
values	SimpleMOC-kernel_header.h	/^	float * values;$/;"	m	struct:__anon3
