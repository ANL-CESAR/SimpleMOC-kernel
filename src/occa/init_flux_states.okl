typedef struct{
  int source_regions;
  int course_axial_intervals;
  int fine_axial_intervals;
  long segments;
  int egroups;
  int nthreads;
  int streams;
} Input;

occaFunction void LCG_RNG( unsigned long * state )
{
  unsigned long n1;
  const unsigned long a = 16807;
  const unsigned long m = 2147483647;
  n1 = ( a * (*state) ) % m;
  *state = n1;
}

// Initialize global flux states to random numbers on device
// Slow, poor use of GPU, but fine since it's just initialization code
occaKernel void init_flux_states(
    float * flux_states,
    const int N_flux_states,
    const Input I,
    unsigned long * state)
{
  for (int outerId1 = 0; outerId1 < outerDim1; ++outerId1; outer1)
  {
    for (int outerId0 = 0; outerId0 < outerDim0; ++outerId0; outer0)
    {
      int outerId     = outerId1   * outerDim0  + outerId0;    // geometric segment
      // int blockId  = blockIdx.y * gridDim.x  + blockIdx.x;  // geometric segment
      // int threadId = blockId    * blockDim.x + threadIdx.x; // energy group

      if(outerId >= N_flux_states)
        return;

      for (int innerId0=0; innerId0 < innerDim0; ++innerId0; inner0)
      {

        // Assign RNG state
        unsigned long * localState = &state[outerId % I.streams];

        if( innerId0 == 0 )
          for( int i = 0; i < I.egroups; i++ )
          {
            LCG_RNG(localState); // update state to next in sequence
            flux_states[outerId +i] = (double) *localState / 2147483647;
          }
      } // end inner0
    } // end outer0
  } // end outer1
}
